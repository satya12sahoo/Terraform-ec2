name: Deploy EC2 Instances

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - 'wrapper/**'
      - '.github/workflows/deploy-ec2.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - 'wrapper/**'
      - '.github/workflows/deploy-ec2.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      instance_config:
        description: 'Instance configuration file (relative to terraform/)'
        required: false
        type: string
        default: 'instances.tfvars'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-west-2'

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    # Only run apply on main branch or manual dispatch
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform Backend
        run: |
          # Create S3 bucket for Terraform state if it doesn't exist
          aws s3api head-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" 2>/dev/null || \
          aws s3 mb s3://"${{ secrets.TF_STATE_BUCKET }}" --region ${{ env.AWS_REGION }}
          
          # Create DynamoDB table for state locking if it doesn't exist
          aws dynamodb describe-table --table-name "${{ secrets.TF_LOCK_TABLE }}" --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws dynamodb create-table \
            --table-name "${{ secrets.TF_LOCK_TABLE }}" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ env.AWS_REGION }}
            
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/ec2-instances.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"
            
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        
      - name: Terraform Validate
        run: terraform validate
        
      - name: Terraform Plan
        id: plan
        run: |
          # Load environment-specific variables
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          CONFIG_FILE="${{ github.event.inputs.instance_config || 'instances.tfvars' }}"
          
          # Check if config file exists, otherwise use default
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file $CONFIG_FILE not found, using default configuration"
            CONFIG_FILE="instances.tfvars"
          fi
          
          # Create plan
          terraform plan \
            -var-file="$CONFIG_FILE" \
            -var="environment=$ENVIRONMENT" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -out=tfplan
        continue-on-error: true
        
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan 📝
            \`\`\`\n
            ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
            \`\`\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Apply
        id: deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          CONFIG_FILE="${{ github.event.inputs.instance_config || 'instances.tfvars' }}"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file $CONFIG_FILE not found, using default configuration"
            CONFIG_FILE="instances.tfvars"
          fi
          
          terraform apply \
            -var-file="$CONFIG_FILE" \
            -var="environment=$ENVIRONMENT" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
            
      - name: Terraform Apply (Manual)
        id: deploy-manual
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CONFIG_FILE="${{ github.event.inputs.instance_config }}"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file $CONFIG_FILE not found, using default configuration"
            CONFIG_FILE="instances.tfvars"
          fi
          
          terraform apply \
            -var-file="$CONFIG_FILE" \
            -var="environment=$ENVIRONMENT" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
            
      - name: Terraform Destroy (Manual)
        id: destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CONFIG_FILE="${{ github.event.inputs.instance_config }}"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file $CONFIG_FILE not found, using default configuration"
            CONFIG_FILE="instances.tfvars"
          fi
          
          terraform destroy \
            -var-file="$CONFIG_FILE" \
            -var="environment=$ENVIRONMENT" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
            
      - name: Get Deployment Outputs
        id: outputs
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          # Get instance information
          INSTANCE_IDS=$(terraform output -raw instance_ids 2>/dev/null || echo "{}")
          PRIVATE_IPS=$(terraform output -raw instance_private_ips 2>/dev/null || echo "{}")
          PUBLIC_IPS=$(terraform output -raw instance_public_ips 2>/dev/null || echo "{}")
          
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo "private_ips=$PRIVATE_IPS" >> $GITHUB_OUTPUT
          echo "public_ips=$PUBLIC_IPS" >> $GITHUB_OUTPUT
          
      - name: Deployment Summary
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "## 🚀 EC2 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:** ${{ github.event.inputs.instance_config }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Instance IDs:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.outputs.outputs.instance_ids }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Private IPs:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.outputs.outputs.private_ips }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Public IPs:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.outputs.outputs.public_ips }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY